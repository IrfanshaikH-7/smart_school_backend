// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DevicePlatform {
  ANDROID
  IOS
}

model School {
  id        String    @id @default(uuid()) @map("id") @db.Uuid
  name      String    @unique @db.VarChar(255)
  logoUrl   String?   @map("logo_url") @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  users                     User[]
  classes                   Class[]
  subjects                  Subject[]
  students                  Student[]
  teacherAssignedToSubjects TeacherAssignedToSubject[]
  assignments               Assignment[]
  announcements             Announcement[]

  @@map("schools")
}

model User {
  id                        String                     @id @default(uuid()) @map("id") @db.Uuid
  name                      String                     @db.VarChar(255)
  email                     String                     @unique @db.VarChar(255)
  password                  String                     @db.VarChar(255)
  phone                     String?                    @db.VarChar(255)
  schoolId                  String                     @map("school_id") @db.Uuid
  createdAt                 DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  school                    School                     @relation(fields: [schoolId], references: [id])
  userRoles                 UserRole[]                 @relation("UserRoles")
  studentParents            StudentParent[]            @relation("ParentStudents")
  teacherAssignedToSubjects TeacherAssignedToSubject[] @relation("TeacherAssignments")
  assignments               Assignment[]               @relation("TeacherAssignments")
  grades                    Grade[]                    @relation("Grader")
  attendance                Attendance[]               @relation("Recorder")
  announcements             Announcement[]             @relation("Creator")
  events                    Event[]                    @relation("Creator")
  eventParticipants         EventParticipant[]
  deviceTokens              DeviceToken[]

  @@map("users")
}

model Role {
  id        String     @id @default(uuid()) @map("id") @db.Uuid
  name      String     @unique @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  userRoles UserRole[] @relation("RoleUsers")

  @@map("roles")
}

model UserRole {
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation("UserRoles", fields: [userId], references: [id])
  role Role @relation("RoleUsers", fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Class {
  id           String    @id @default(uuid()) @map("id") @db.Uuid
  name         String    @db.VarChar(255)
  section      String    @db.VarChar(255)
  academicYear String    @map("academic_year") @db.VarChar(255)
  schoolId     String    @map("school_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  school                    School                     @relation(fields: [schoolId], references: [id])
  students                  Student[]
  teacherAssignedToSubjects TeacherAssignedToSubject[]
  assignments               Assignment[]
  attendance                Attendance[]

  @@unique([name, section, academicYear, schoolId])
  @@map("classes")
}

model Subject {
  id        String    @id @default(uuid()) @map("id") @db.Uuid
  name      String    @db.VarChar(255)
  schoolId  String    @map("school_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  school                    School                     @relation(fields: [schoolId], references: [id])
  teacherAssignedToSubjects TeacherAssignedToSubject[]
  assignments               Assignment[]
  announcements             Announcement[]

  @@unique([name, schoolId])
  @@map("subjects")
}

model Student {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  name            String    @db.VarChar(255)
  rollNumber      String    @map("roll_number") @db.VarChar(255)
  classId         String    @map("class_id") @db.Uuid
  schoolId        String    @map("school_id") @db.Uuid
  profileImageUrl String?   @map("profile_image_url") @db.Text
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  class         Class           @relation(fields: [classId], references: [id])
  school        School          @relation(fields: [schoolId], references: [id])
  studentParents StudentParent[]
  grades        Grade[]
  attendance    Attendance[]

  @@unique([rollNumber, schoolId])
  @@map("students")
}

model StudentParent {
  studentId    String   @map("student_id") @db.Uuid
  parentUserId String   @map("parent_user_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  student Student @relation(fields: [studentId], references: [id])
  parent  User    @relation("ParentStudents", fields: [parentUserId], references: [id])

  @@id([studentId, parentUserId])
  @@map("student_parents")
}

model TeacherAssignedToSubject {
  id           String    @id @default(uuid()) @map("id") @db.Uuid
  teacherId    String    @map("teacher_id") @db.Uuid
  subjectId    String    @map("subject_id") @db.Uuid
  classId      String    @map("class_id") @db.Uuid
  academicYear String    @map("academic_year") @db.VarChar(255)
  schoolId     String    @map("school_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  teacher User   @relation("TeacherAssignments", fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  school  School  @relation(fields: [schoolId], references: [id])

  @@unique([teacherId, subjectId, classId, academicYear])
  @@map("teacher_assigned_to_subjects")
}

model Assignment {
  id          String    @id @default(uuid()) @map("id") @db.Uuid
  title       String    @db.VarChar(255)
  description String?   @db.Text
  dueDate     DateTime  @map("due_date") @db.Date
  fileUrl     String?   @map("file_url") @db.Text
  classId     String    @map("class_id") @db.Uuid
  subjectId   String    @map("subject_id") @db.Uuid
  teacherId   String    @map("teacher_id") @db.Uuid
  schoolId    String    @map("school_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher User    @relation("TeacherAssignments", fields: [teacherId], references: [id])
  school  School  @relation(fields: [schoolId], references: [id])
  grades  Grade[]

  @@map("assignments")
}

model Grade {
  id          String    @id @default(uuid()) @map("id") @db.Uuid
  assignmentId String   @map("assignment_id") @db.Uuid
  studentId   String    @map("student_id") @db.Uuid
  score       Decimal   @db.Decimal(65, 30) // Adjust precision/scale as needed
  feedback    String?   @db.Text
  gradedBy    String    @map("graded_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])
  grader     User       @relation("Grader", fields: [gradedBy], references: [id])

  @@unique([assignmentId, studentId])
  @@map("grades")
}

model Attendance {
  id         String    @id @default(uuid()) @map("id") @db.Uuid
  studentId  String    @map("student_id") @db.Uuid
  classId    String    @map("class_id") @db.Uuid
  date       DateTime  @db.Date
  status     String    @db.VarChar(255)
  recordedBy String    @map("recorded_by") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  student   Student @relation(fields: [studentId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])
  recorder  User    @relation("Recorder", fields: [recordedBy], references: [id])

  @@unique([studentId, classId, date])
  @@map("attendance")
}

model Announcement {
  id          String    @id @default(uuid()) @map("id") @db.Uuid
  title       String    @db.VarChar(255)
  content     String    @db.Text
  fileUrl     String?   @map("file_url") @db.Text
  subjectId   String?   @map("subject_id") @db.Uuid
  createdBy   String    @map("created_by") @db.Uuid
  schoolId    String    @map("school_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  subject           Subject?           @relation(fields: [subjectId], references: [id])
  creator           User               @relation("Creator", fields: [createdBy], references: [id])
  school            School             @relation(fields: [schoolId], references: [id])
  announcementTargets AnnouncementTarget[]

  @@map("announcements")
}

model AnnouncementTarget {
  announcementId String   @map("announcement_id") @db.Uuid
  targetId       String   @map("target_id") @db.Uuid
  targetType     String   @map("target_type") @db.VarChar(255)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  announcement Announcement @relation(fields: [announcementId], references: [id])

  @@id([announcementId, targetId, targetType])
  @@map("announcement_targets")
}

model Event {
  id            String    @id @default(uuid()) @map("id") @db.Uuid
  name          String    @db.VarChar(255)
  description   String?   @db.Text
  eventDate     DateTime  @map("event_date") @db.Date
  coverImageUrl String?   @map("cover_image_url") @db.Text
  createdBy     String    @map("created_by") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  creator           User               @relation("Creator", fields: [createdBy], references: [id])
  eventTargets      EventTarget[]
  eventParticipants EventParticipant[]

  @@map("events")
}

model EventTarget {
  eventId    String   @map("event_id") @db.Uuid
  targetId   String   @map("target_id") @db.Uuid
  targetType String   @map("target_type") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  event Event @relation(fields: [eventId], references: [id])

  @@id([eventId, targetId, targetType])
  @@map("event_targets")
}

model EventParticipant {
  eventId   String   @map("event_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  status    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
  @@map("event_participants")
}

model DeviceToken {
  id         String         @id @default(uuid()) @map("id") @db.Uuid
  userId     String         @map("user_id") @db.Uuid
  token      String         @unique @db.VarChar(255)
  platform   DevicePlatform
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  lastUsedAt DateTime       @default(now()) @map("last_used_at") @db.Timestamptz(6)
  updatedAt  DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])

  @@map("device_tokens")
}
